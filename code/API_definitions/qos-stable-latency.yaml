openapi: 3.0.1
info:
  title: QoS for stable latency API
  description: Service Enabling Network Function API for QoS control
  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.2.0
externalDocs:
  description: Product documentation
  url: https://github.com/camaraproject/
servers:
  - url: '{apiRoot}/{basePath}'
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
      basePath:
        default: qos-latency-senf/v1
        description: base path for the qos latency API
paths:
  /sessions:
    post:
      tags:
        - QoS sessions
      summary: 'Reserve resources for QoS session'
      description: In case of successfully created session, actually granted QoS level will be returned. The underlying mobile network can grant qos level that is lower than requested one.
      operationId: createSession
      requestBody:
        description: Creates a new session without changing a QoS profile.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSession'
        required: true
      callbacks:
        notifications:
          '{$request.body#/notificationUrl}/notifications':
            $ref: '#/paths/~1notifications'
      responses:
        201:
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfo'
        401:
          description: Unauthorized
          content: {}
        400:
          description: Invalid input
          content: {}
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
        500:
          description: Session not created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
  /sessions/{sessionId}:
    get:
      tags:
        - QoS sessions
      summary: 'Get session information'
      operationId: getSession
      parameters:
        - name: sessionId
          in: path
          description: Session ID that was obtained from the createSession operation
          required: true
          schema:
            $ref: '#/components/schemas/SessionId'
      responses:
        200:
          description: Contains information about active session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfo'
        401:
          description: Unauthorized
          content: { }
        404:
          description: Session not found
          content: {}
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
    delete:
      tags:
        - QoS sessions
      summary: 'Free resources related to QoS session'
      operationId: deleteSession
      parameters:
        - name: sessionId
          in: path
          description: Session ID that was obtained from the createSession operation
          required: true
          schema:
            $ref: '#/components/schemas/SessionId'
      responses:
        204:
          description: Session deleted
          content: {}
        401:
          description: Unauthorized
          content: { }
        404:
          description: Session not found
          content: {}
  /notifications:
    post:
      tags:
        - Session notifications callback
      summary: 'Session notifications callback'
      description: |
        Important: this endpoint is to be implemented by the API consumer.
        The QoD server will call this endpoint whenever any network related event occurs.
        Currently only SESSION_TERMINATED event is implemented. Any other network events are ignored.
      operationId: postNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '204':
          description: Successful notification
          content: {}
      security:
        - oAuth2ClientCredentials: []
components:
  schemas:
    SessionId:
      type: string
      format: uuid
      description: Session ID in UUID format
    SessionInfo:
      allOf:
        - $ref: '#/components/schemas/CreateSession'
      type: object
      required:
        - id
        - duration
        - startedAt
        - expiresAt
      properties:
        id:
          $ref: '#/components/schemas/SessionId'
        startedAt:
          type: integer
          example: 1639479600
          description: Timestamp of session start in seconds since unix epoch
          format: int64
        expiresAt:
          type: integer
          example: 1639566000
          description: Timestamp of session expiration if the session was not deleted, in seconds since unix epoch
          format: int64
      description: Session related information.
    CreateSession:
      description: Data type with attributes required for creating a session
      type: object
      properties:
        duration:
          type: integer
          example: 86400
          description: |
            Session duration in seconds. Maximal value of 24 hours is used if not set.
            After session has expired the client will receive SESSION_TERMINATED event. See notification callback.
          format: int32
          minimum: 1
          maximum: 86400
        ueAddr:
          $ref: '#/components/schemas/Ipv4Addr'
        flowDescriptions:
            type: array
            items:
              $ref: '#/components/schemas/IpFlowDescription'
            minItems: 1
            maxItems: 2
        qos:
          $ref: '#/components/schemas/QosProfile'
        notificationUri:
          type: string
          format: uri
          example: 'https://application-server.com/notifications'
          description: Allows asynchronous delivery of session related events
        notificationAuthToken:
          type: string
          example: 'c8974e592c2fa383d4a3960714'
          description: Authentification token for callback API
      required:
        - ueAddr
        - flowDescriptions
        - qos 
    IpFlowDescription:
      type: object
      required:
        - direction
        - protocol
        - ueAddr
        - uePorts
        - remoteAddr
        - remotePorts        
      properties:
        direction:
          $ref: '#/components/schemas/Direction'
        protocol:
          $ref: '#/components/schemas/Protocol'
        ueAddr:
          $ref: '#/components/schemas/Ipv4Addr'
        uePorts:
          $ref: '#/components/schemas/PortsSpec'
        remoteAddr:
          $ref: '#/components/schemas/Ipv4Addr'
        remotePorts: 
          $ref: '#/components/schemas/PortsSpec'
    Direction: 
      type: string
      enum:
        - TO_UE
        - FROM_UE
        - BIDIRECTION
    Ipv4Addr:
      type: string
      format: ipv4
      pattern: '^([01]?\d\d?|2[0-4]\d|25[0-5])(?:\.(?:[01]?\d\d?|2[0-4]\d|25[0-5])){3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
      example: '192.168.0.1/24'
      description: |
        IPv4 address may be specified in form <address/mask> as:
          - address - an IPv4 number in dotted-quad form 1.2.3.4. Only this exact IP number will match the flow control rule.
          - address/mask - an IP number as above with a mask width of the form 1.2.3.4/24.
            In this case, all IP numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid for the IP version.
    PortsSpec:
      type: string
      example: '5010-5020,5021,5022'
      description: |
        Ports may be specified as <{port/port-port}[,ports[,...]]>. The '-' notation specifies a range of ports (including boundaries).
    Protocol:
      type: string
      enum:
        - TCP
        - UDP
        - ANY
      description: |
        * `TCP` - Qualifier for TCP protocol
        * `UDP` - Qualifier for UDP protocol
        * `ANY` - Qualifier for all protocols
    QosProfile:
      type: string
      enum:
        - LOW_LATENCY
      description: |
        * `LOW_LATENCY` - Corresponds to a specific set of network parameters that will be negotiated with the network provider in advance
    Notification:
      type: object
      required:
        - sessionId
        - event
      properties:
        sessionId:
          $ref: '#/components/schemas/SessionId'
        event:
          $ref: '#/components/schemas/SessionEvent'
    SessionEvent:
      type: string
      enum:
        - SESSION_TERMINATED
    QosChanged:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SessionId'
        qos:
          $ref: '#/components/schemas/QosProfile'
    ErrorInfo:
      type: object
      properties:
        message:
          type: string
          description: Detailed error description
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      description: This API uses OAuth 2 with the client credentials grant flow.
      flows:
        clientCredentials:
          tokenUrl: https://example.com/auth/realms/Sample/protocol/openid-connect/token
          scopes:
            { }
security:
  - oAuth2ClientCredentials: []
