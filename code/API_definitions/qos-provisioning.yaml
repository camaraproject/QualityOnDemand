openapi: 3.0.3
info:
  title: QoS Provisioning
  description: |
    The Quality of Service (QoS) Provisioning API provides a programmable interface for developers to request the indefinite assignment of a specified QoS profile to all traffic being sent or received by a specified device.

    The association resulting from the QoS provisioning request is represented by a QoS assignment record (or QoS assignment for short) that includes information about the date of assignment, the QoS profile assigned to a device, the assignment status, etc., as well as an `assignmentId` that uniquely identifies this record for later use.

    Additionally, this API configures the network to apply the requested QoS profile to a specified device whenever the device is connected to the network, until the assignment is revoked.

    # Relevant terms and definitions

    * **QoS profiles and QoS profile labels**:
    Latency, throughput or priority requirements of the application mapped to relevant QoS profile values. The set of QoS Profiles that a network operator is offering may be retrieved via the `qos-profiles` API (cf. https://github.com/camaraproject/QualityOnDemand/) or will be agreed during the onboarding with the API service provider.

    * **Identifier for the device**:
    At least one identifier for the device (user equipment) out of four options: IPv4 address, IPv6 address, Phone Number, or Network Access Identifier assigned by the mobile network operator for the device. Where more than one device identifier is provided, only one identifier will be selected by the implementation and this choice indicated to the API consumer in the provisioning details. If only a single device identifier is provided, the implementation may or may not include the device identifier in the assignment details.


      Note: Network Access Identifier is defined for future use and will not be supported with this version of the API.

    * **Notification URL and token**:
    API consumers may provide a callback URL (`sink`) on which notifications about all status change events (eg. assignment termination) can be received from the API provider. This is an optional parameter. The notification will be sent as a CloudEvent compliant message. If `sink` is included, it is RECOMMENDED for the client to provide as well the `sinkCredential` property to protect the notification endpoint.

    # Resources and Operations overview
    The API defines four operations:

    - An operation to assign a QoS profile for a given device indefinitely.
    - An operation to get the information about a specific QoS assignment record, identified by its `assignmentId`.
    - An operation to get the details of a QoS assignment record for a given device.
    - An operation to revoke the assignment of a QoS profile to a given device, identified by the `assignmentId`.

    # Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an API consumer requests an access token. Please refer to Identity and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the onboarding process, happening between the API consumer and the API provider, taking into account the declared purpose for accessing the API, whilst also being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of three-legged access tokens is mandatory. This ensures that the API remains in compliance with privacy regulations, upholding the principles of transparency and user-centric privacy-by-design.

    # Identifying the device from the access token

    This API requires the API consumer to identify a device as the subject of the API as follows:
    - When the API is invoked using a two-legged access token, the subject will be identified from the optional `device` object, which therefore MUST be provided.

    - When a three-legged access token is used however, this optional identifier MUST NOT be provided, as the subject will be uniquely identified from the access token.

    This approach simplifies API usage for API consumers using a three-legged access token to invoke the API by relying on the information that is associated with the access token and was identified during the authentication process.

    ## Error handling:
    - If the subject cannot be identified from the access token and the optional `device` object is not included in the request, then the server will return an error with the `422 MISSING_IDENTIFIER` error code.

    - If the subject can be identified from the access token and the optional `device` object is also included in the request, then the server will return an error with the `422 UNNECESSARY_IDENTIFIER` error code. This will be the case even if the same device is identified by these two methods, as the server is unable to make this comparison.

    - If the requested `qosProfile` exists but is currently not available or incompatible for the QoS assignment (e.g., its status is INACTIVE or DEPRECATED, or its characteristics are not compatible with QoS Provisioning service), then the server will return an error with the `422 QOS_PROVISIONING.QOS_PROFILE_NOT_APPLICABLE` error code.

    # Multi-SIM scenario handling

    In multi-SIM scenarios where more than one mobile device is associated with a phone number (e.g. a smartphone with an associated smartwatch), it might not be possible to uniquely identify the device to which the QoS profile should apply from that phone number. If the phone number is used as the device identifier when assigning a QoS profile in a multi-SIM scenario, the API may respond with an error, apply the QoS profile to all devices in the multi-SIM group, or apply the QoS profile to a single device in the multi-SIM group which may not be the intended device.

    Possible solutions in such a scenario include:
    - Using the authorisation code flow to obtain an access token, which will automatically identify the intended device
    - Identifying the intended device from a unique identifier for that device, such as its source IP address and port
    - Check with the SIM provider whether a unique "secondary" phone number is already associated with each device, and use the secondary phone number to identify the intended device if available.

    # Additional CAMARA error responses

    The list of error codes in this API specification is not exhaustive. Therefore the API specification may not document some non-mandatory error statuses as indicated in `CAMARA API Design Guide`.

    Please refer to the `CAMARA_common.yaml` of the Commonalities Release associated to this API version for a complete list of error responses. The applicable Commonalities Release can be identified in the `API Readiness Checklist` document associated to this API version.

    As a specific rule, error `501 - NOT_IMPLEMENTED` can be only a possible error response if it is explicitly documented in the API.

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.3.0
  x-camara-commonalities: 0.6

externalDocs:
  description: Project documentation at CAMARA
  url: https://github.com/camaraproject/QualityOnDemand

servers:
  - url: "{apiRoot}/qos-provisioning/v0.3"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`
tags:
  - name: QoS Assignment
    description: Manage the permanent assignment of a QoS profile to a device

paths:
  /qos-assignments:
    post:
      tags:
        - QoS Assignment
      summary: Triggers the provisioning process for the assignment of a QoS profile to a device
      description: |
        Initiates the assignment of a specific QoS profile to a given device when connected to the operator's network.

        - If the QoS profile assignment is completed synchronously, the response will be 201 with `status` = `AVAILABLE`.
        - If the QoS profile assignment request is accepted but not yet completed, the response will be 201 with `status` = `REQUESTED`.
        - If the operator determines synchronously that the QoS profile assignment request cannot be fulfilled, the response will be 201 with `status` = `UNAVAILABLE`.

        - If the request includes the `sink` and `sinkCredential` properties, the client will receive a `status-changed` event with the outcome of the process. The event will be sent also for synchronous operations.

        **NOTES:**
        - When the assignment status becomes `UNAVAILABLE`, the QoS profile assignment is not immediately released, but will get deleted automatically, at earliest 360 seconds after.

        This behavior allows API consumers that are not receiving notification events but are polling, to get the QoS profile assignment status information. Before a client can attempt to create a new QoS profile assignment for the same device, they must release the previous assignment resources with an explicit `delete` operation if not yet automatically deleted.
        - The access token may be either 2-legged or 3-legged. See "Identifying the device from the access token" for further information
          - When the API is invoked using a two-legged access token, the subject will be identified from the optional `device` object, which therefore MUST be provided.
          - When a three-legged access token is used however, this optional identifier MUST NOT be provided, as the subject will be uniquely identified from the access token.

      operationId: createQosAssignment
      parameters:
        - $ref: "#/components/parameters/x-correlator"
      requestBody:
        description: Parameters to assign a QoS profile to a device
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAssignment"
        required: true
      callbacks:
        notifications:
          "{$request.body#/sink}":
            post:
              summary: Assignment notifications callback
              description: |
                Important: this endpoint is to be implemented by the API consumer.
                The QoS server will call this endpoint whenever any QoS assignment change related event occurs.
                Currently only `ASSIGNMENT_STATUS_CHANGED` event is defined.
              operationId: postQosAssignmentNotification
              parameters:
                - $ref: "#/components/parameters/x-correlator"
              requestBody:
                required: true
                content:
                  application/cloudevents+json:
                    schema:
                      $ref: "#/components/schemas/CloudEvent"
                    examples:
                      ASSIGNMENT_STATUS_CHANGED_EXAMPLE:
                        $ref: "#/components/examples/ASSIGNMENT_STATUS_CHANGED_EXAMPLE"
              responses:
                "204":
                  description: Successful notification
                  headers:
                    x-correlator:
                      $ref: "#/components/headers/x-correlator"
                "400":
                  $ref: "#/components/responses/Generic400"
                "401":
                  $ref: "#/components/responses/Generic401"
                "403":
                  $ref: "#/components/responses/Generic403"
                "410":
                  $ref: "#/components/responses/Generic410"
                "429":
                  $ref: "#/components/responses/Generic429"
              security:
                - {}
                - notificationsBearerAuth: []
      responses:
        "201":
          description: Assignment created
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentInfo"
              examples:
                Successful QoS Profile Assignment Creation:
                  $ref: "#/components/examples/ASSIGNMENT_CREATION_EXAMPLE"
                Successful QoS Profile Assignment Creation with Device in the response:
                  $ref: "#/components/examples/ASSIGNMENT_CREATION_EXAMPLE_WITH_DEVICE_RESPONSE"
        "400":
          $ref: "#/components/responses/CreateAssignment400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/GenericDevice404"
        "409":
          $ref: "#/components/responses/AssignmentConflict409"
        "422":
          $ref: "#/components/responses/CreateAssignment422"
        "429":
          $ref: "#/components/responses/Generic429"
      security:
        - openId:
            - "qos-provisioning:qos-assignments:create"

  /qos-assignments/{assignmentId}:
    get:
      tags:
        - QoS Assignment
      summary: Get the QoS profile assignment information identified by an assignment record ID
      description: |
        Querying for details about the QoS profile assignment

        **NOTES:**
        - The access token may be either 2-legged or 3-legged.
        - If a 3-legged access token is used, the subject associated with the QoS profile assignment must also be associated with the access token.
        - The QoS profile assignment must have been created by the same API consumer given in the access token.
      operationId: getQosAssignmentById
      parameters:
        - $ref: "#/components/parameters/assignmentId"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        "200":
          description: Returns information about certain assignment
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentInfo"
              examples:
                ASSIGNMENT_AVAILABLE:
                  $ref: "#/components/examples/ASSIGNMENT_AVAILABLE"
                ASSIGNMENT_UNAVAILABLE:
                  $ref: "#/components/examples/ASSIGNMENT_UNAVAILABLE"
                ASSIGNMENT_AVAILABLE_WITHOUT_DEVICE:
                  $ref: "#/components/examples/ASSIGNMENT_AVAILABLE_WITHOUT_DEVICE"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "429":
          $ref: "#/components/responses/Generic429"
      security:
        - openId:
            - "qos-provisioning:qos-assignments:read"

    delete:
      tags:
        - QoS Assignment
      summary: Revokes a QoS profile assignment identified by an assignment record ID
      description: |
        Revokes the assignment of a QoS profile to a device performed by a previous assignment operation.

        If the notification callback is provided and the assignment status was `AVAILABLE`, when the process is completed, the API consumer will receive in addition to the response a `ASSIGNMENT_STATUS_CHANGED` event with
        - `status` as `UNAVAILABLE` and
        - `statusInfo` as `DELETE_REQUESTED`
        There will be no notification event if the `status` was already `UNAVAILABLE`.

        **NOTES:**
        - The access token may be either 2-legged or 3-legged.
        - If a 3-legged access token is used, the subject associated with the QoS profile assignment must also be associated with the access token.
        - The QoS profile assignment must have been created by the same API consumer given in the access token.
      operationId: revokeQosAssignment
      parameters:
        - $ref: "#/components/parameters/assignmentId"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        "204":
          description: Assignment revoked
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "202":
          description: Deletion request accepted to be processed. It applies for an async deletion process. `status` in the response will be `AVAILABLE` with `statusInfo` set to `DELETE_REQUESTED`.
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentInfo"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "429":
          $ref: "#/components/responses/Generic429"
      security:
        - openId:
            - "qos-provisioning:qos-assignments:delete"

  /retrieve-qos-assignment:
    post:
      tags:
        - QoS Assignment
      summary: Returns the assignment record details of the QoS profile assignment for a device
      description: |
        Returns the details of the record for the assignment of a QoS profile to a device, if any.

        **NOTES:**
        - The access token may be either 2-legged or 3-legged. See "Identifying the device from the access token" for further information
          - When the API is invoked using a two-legged access token, the subject will be identified from the optional `device` object, which therefore MUST be provided.
          - When a three-legged access token is used however, this optional identifier MUST NOT be provided, as the subject will be uniquely identified from the access token.
        - The QoS profile assignment must have been created by the same API consumer given in the access token.
        - If no QoS profile assignment is found for the device, an error response 404 is returned with code "NOT_FOUND".
        - This call uses the POST method instead of GET to comply with the [CAMARA Commonalities guidelines](https://github.com/camaraproject/Commonalities/blob/r3.3/documentation/CAMARA-API-Design-Guide.md#65-post-or-get-for-transferring-sensitive-or-complex-data) for sending sensitive or complex data in API calls. Since the device field may contain personally identifiable information, it should not be sent via GET.

      operationId: getQosAssignmentByDevice
      parameters:
        - $ref: "#/components/parameters/x-correlator"
      requestBody:
        description: Parameters to retrieve an assignment record by device
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrieveAssignmentByDevice"
        required: true
      responses:
        "200":
          description: Returns information about the QoS profile assignment for the device.

          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentInfo"
              examples:
                ASSIGNMENT_AVAILABLE:
                  $ref: "#/components/examples/ASSIGNMENT_AVAILABLE"
                ASSIGNMENT_UNAVAILABLE:
                  $ref: "#/components/examples/ASSIGNMENT_UNAVAILABLE"
                ASSIGNMENT_AVAILABLE_WITHOUT_DEVICE:
                  $ref: "#/components/examples/ASSIGNMENT_AVAILABLE_WITHOUT_DEVICE"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/GenericDevice404"
        "422":
          $ref: "#/components/responses/Generic422"
        "429":
          $ref: "#/components/responses/Generic429"
      security:
        - openId:
            - "qos-provisioning:qos-assignments:read-by-device"

components:
  securitySchemes:
    openId:
      description: OpenID Connect authentication
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
    notificationsBearerAuth:
      description: Bearer authentication for notifications
      type: http
      scheme: bearer
      bearerFormat: "{$request.body#/sinkCredential.credentialType}"

  parameters:
    assignmentId:
      name: assignmentId
      in: path
      description: Identifier of the assignment record for the QoS profile assignment, that was created by the `createQosAssignment` operation
      required: true
      schema:
        $ref: "#/components/schemas/AssignmentId"

    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        $ref: "#/components/schemas/XCorrelator"

  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        $ref: "#/components/schemas/XCorrelator"

  schemas:
    XCorrelator:
      description: Value for the x-correlator
      type: string
      pattern: ^[a-zA-Z0-9-_:;.\/<>{}]{0,256}$
      example: "b4333c46-49c0-4f62-80d7-f0ef930f1c46"

    AssignmentId:
      description: Identifier of the assignment record for the QoS profile assignment, that was created by the `createQosAssignment` operation
      type: string
      format: uuid

    BaseAssignmentInfo:
      description: Common attributes of the assignment record for a QoS profile assignment
      type: object
      properties:
        device:
          $ref: "#/components/schemas/Device"
        qosProfile:
          $ref: "#/components/schemas/QosProfileName"
        sink:
          type: string
          format: uri
          pattern: ^https:\/\/.+$
          description: The address to which events shall be delivered using the selected protocol.
          example: "https://endpoint.example.com/sink"
        sinkCredential:
          $ref: "#/components/schemas/SinkCredential"
      required:
        - qosProfile

    AssignmentInfo:
      description: |
        Information about a QoS profile assignment returned in responses.
        Optional device object only to be returned if provided in `createQosAssignment`. If more than one type of device identifier was provided, only one identifier will be returned (at implementation choice and with the original value provided in assignQosProfile).
        Please note that IP addresses of devices can change and get reused, so the original values may no longer identify the same device. They identified the device at the time the QoS profile assignment was created.

      allOf:
        - type: object
          properties:
            device:
              $ref: "#/components/schemas/DeviceResponse"
        - $ref: "#/components/schemas/BaseAssignmentInfo"
        - type: object
          properties:
            assignmentId:
              $ref: "#/components/schemas/AssignmentId"
            startedAt:
              description: Date and time when the QoS profile assignment became "AVAILABLE". Not to be returned when `status` is "REQUESTED". It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
              type: string
              format: date-time
              example: "2024-06-01T12:00:00Z"
            status:
              $ref: "#/components/schemas/Status"
            statusInfo:
              $ref: "#/components/schemas/StatusInfo"
          required:
            - assignmentId
            - status

    CreateAssignment:
      description: Attributes to request a new QoS profile assignment
      allOf:
        - type: object
          properties:
            device:
              $ref: "#/components/schemas/Device"
        - $ref: "#/components/schemas/BaseAssignmentInfo"

    RetrieveAssignmentByDevice:
      description: Attributes to look for a QoS profile assignment
      type: object
      properties:
        device:
          $ref: "#/components/schemas/Device"

    SinkCredential:
      description: A sink credential provides authentication or authorization information necessary to enable delivery of events to a target.
      type: object
      properties:
        credentialType:
          type: string
          enum:
            - PLAIN
            - ACCESSTOKEN
            - REFRESHTOKEN
          description: |
            The type of the credential.
            Note: Type of the credential - MUST be set to ACCESSTOKEN for now.
      discriminator:
        propertyName: credentialType
        mapping:
          PLAIN: "#/components/schemas/PlainCredential"
          ACCESSTOKEN: "#/components/schemas/AccessTokenCredential"
          REFRESHTOKEN: "#/components/schemas/RefreshTokenCredential"
      required:
        - credentialType

    PlainCredential:
      type: object
      description: A plain credential as a combination of an identifier and a secret. MUST not be used in this API version.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          required:
            - identifier
            - secret
          properties:
            identifier:
              description: The identifier might be an account or username.
              type: string
            secret:
              description: The secret might be a password or passphrase.
              type: string

    AccessTokenCredential:
      type: object
      description: An access token credential.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          properties:
            accessToken:
              description: REQUIRED. An access token is a previously acquired token granting access to the target resource.
              type: string
            accessTokenExpiresUtc:
              type: string
              format: date-time
              description: |
                REQUIRED. An absolute (UTC) timestamp at which the token shall be considered expired. Token expiration should occur
                after the termination of the requested assignment, allowing the client to be notified of any changes during the
                assignment's existence. If the token expires while the assignment is still active, the client will stop receiving notifications.
                If the access token is a JWT and registered "exp" (Expiration Time) claim is present, the two expiry times should match.
                It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
              example: "2023-07-03T12:27:08.312Z"
            accessTokenType:
              description: REQUIRED. Type of the access token (See [OAuth 2.0](https://tools.ietf.org/html/rfc6749#section-7.1)).
              type: string
              enum:
                - bearer
          required:
            - accessToken
            - accessTokenExpiresUtc
            - accessTokenType

    RefreshTokenCredential:
      type: object
      description: An access token credential with a refresh token. MUST not be used in this API version.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          properties:
            accessToken:
              description: REQUIRED. An access token is a previously acquired token granting access to the target resource.
              type: string
            accessTokenExpiresUtc:
              type: string
              format: date-time
              description: |
                REQUIRED. An absolute UTC instant at which the token shall be considered expired.
                If the access token is a JWT and registered "exp" (Expiration Time) claim is present, the two expiry times should match.
                It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
            accessTokenType:
              description: REQUIRED. Type of the access token (See [OAuth 2.0](https://tools.ietf.org/html/rfc6749#section-7.1)).
              type: string
              enum:
                - bearer
            refreshToken:
              description: REQUIRED. An refresh token credential used to acquire access tokens.
              type: string
            refreshTokenEndpoint:
              type: string
              format: uri
              description: REQUIRED. A URL at which the refresh token can be traded for an access token.
      required:
        - accessToken
        - accessTokenExpiresUtc
        - accessTokenType
        - refreshToken
        - refreshTokenEndpoint

    Port:
      description: TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535

    QosProfileName:
      description: |
        A unique name for identifying a specific QoS profile.
        This may follow different formats depending on the service providers implementation.
        Some options addresses:
          - A UUID style string
          - Support for predefined profiles QOS_S, QOS_M, QOS_L, and QOS_E
          - A searchable descriptive name
        The set of QoS Profiles that an API provider is offering may be retrieved by means of the QoS Profile API (qos-profile) or agreed on onboarding time.
      type: string
      example: QCI_1_voice
      minLength: 3
      maxLength: 256
      format: string
      pattern: "^[a-zA-Z0-9_.-]+$"

    CloudEvent:
      description: Event compliant with the CloudEvents specification
      required:
        - id
        - source
        - specversion
        - type
        - time
      properties:
        id:
          description: Identifier of this event, that must be unique in the source context.
          type: string
        source:
          description: Identifies the context in which an event happened in the specific Provider Implementation.
          type: string
          format: uri-reference
        type:
          description: The type of the event.
          type: string
          enum:
            - "org.camaraproject.qos-provisioning.v0.status-changed"
        specversion:
          description: Version of the specification to which this event conforms (must be 1.0 if it conforms to cloudevents 1.0.2 version)
          type: string
          enum:
            - "1.0"
        datacontenttype:
          description: 'media-type that describes the event payload encoding, must be "application/json" for CAMARA APIs'
          type: string
          enum:
            - "application/json"
        data:
          description: Event notification details payload, which depends on the event type
          type: object
        time:
          description: |
            Timestamp of when the occurrence happened. It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
          type: string
          format: date-time
      discriminator:
        propertyName: "type"
        mapping:
          org.camaraproject.qos-provisioning.v0.status-changed: "#/components/schemas/EventStatusChanged"

    EventStatusChanged:
      description: Event to notify a QoS provisioning status change
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              type: object
              description: Event details depending on the event type
              required:
                - assignmentId
                - qosStatus
              properties:
                assignmentId:
                  $ref: "#/components/schemas/AssignmentId"
                status:
                  $ref: "#/components/schemas/StatusChanged"
                statusInfo:
                  $ref: "#/components/schemas/StatusInfo"
          required:
            - data

    StatusInfo:
      description: |
        Reason for the new `status`:
        * `NETWORK_TERMINATED` - Network terminated the QoS profile assignment
        * `DELETE_REQUESTED` - User requested the deletion of the QoS profile assignment

      type: string
      enum:
        - NETWORK_TERMINATED
        - DELETE_REQUESTED

    Device:
      description: |
        End-user equipment able to connect to the network. Examples of devices include smartphones or IoT sensors/actuators.

        The developer can choose to provide the below specified device identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`

        NOTE1: the network operator might support only a subset of these options. The API consumer can provide multiple identifiers to be compatible across different network operators. In this case the identifiers MUST belong to the same device.
        NOTE2: for this Commonalities release, we are enforcing that the networkAccessIdentifier is only part of the schema for future-proofing, and CAMARA does not currently allow its use. After the CAMARA meta-release work is concluded and the relevant issues are resolved, its use will need to be explicitly documented in the guidelines.
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/DeviceIpv6Address"
      minProperties: 1

    DeviceResponse:
      description: |
        An identifier for the end-user equipment able to connect to the network that the response refers to. This parameter is only returned when the API consumer includes the `device` parameter in their request (i.e. they are using a two-legged access token), and is relevant when more than one device identifier is specified, as only one of those device identifiers is allowed in the response.

        If the API consumer provides more than one device identifier in their request, the API provider must return a single identifier which is the one they are using to fulfil the request, even if the identifiers do not match the same device. API provider does not perform any logic to validate/correlate that the indicated device identifiers match the same device. No error should be returned if the identifiers are otherwise valid to prevent API consumers correlating different identifiers with a given end user.

      allOf:
        - $ref: "#/components/schemas/Device"
        - maxProperties: 1

    NetworkAccessIdentifier:
      description: A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.
      type: string
      example: "123456789@domain.com"

    PhoneNumber:
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.
      type: string
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789"

    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).

        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.

        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)

        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        {
          "publicAddress": "203.0.113.0",
          "publicPort": 59765
        }

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      format: ipv4
      example: "203.0.113.0"

    DeviceIpv6Address:
      description: |
        The device should be identified by the observed IPv6 address, or by any single IPv6 address from within the subnet allocated to the device (e.g. adding ::0 to the /64 prefix).
      type: string
      format: ipv6
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344

    Status:
      description: |
        The current status of the requested QoS profile assignment. The status can be one of the following:
        * `REQUESTED` - QoS profile assignment has been requested but is still being processed.
        * `AVAILABLE` - The requested QoS profile has been assigned to the device, and is active.
        * `UNAVAILABLE` - The QoS profile assignment request has been processed but is not active. `statusInfo` may provide additional information about the reason for the unavailability.
      enum:
        - REQUESTED
        - AVAILABLE
        - UNAVAILABLE

    StatusChanged:
      description: |
        The current status of a requested or previously available QoS profile assignment. Applicable values in the event are:
        *  `AVAILABLE` - The requested QoS profile has been assigned to the device, and is active.
        *  `UNAVAILABLE` - A requested or previously available QoS profile assignment is now unavailable. `statusInfo` may provide additional information about the reason for the unavailability.
      type: string
      enum:
        - AVAILABLE
        - UNAVAILABLE

    ErrorInfo:
      description: Common schema for errors
      type: object
      properties:
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: A human-readable code to describe the error
        message:
          type: string
          description: A human-readable description of what the event represents
      required:
        - status
        - code
        - message

  responses:
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
            GENERIC_400_OUT_OF_RANGE:
              description: Out of Range. Specific Syntax Exception used when a given field has a pre-defined range or a invalid filter criteria combination is requested
              value:
                status: 400
                code: OUT_OF_RANGE
                message: Client specified an invalid range.

    CreateAssignment400:
      description: Bad Request with additional errors for implicit notifications
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
                      - INVALID_CREDENTIAL
                      - INVALID_TOKEN
                      - INVALID_SINK
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
            GENERIC_400_OUT_OF_RANGE:
              description: Out of Range. Specific Syntax Exception used when a given field has a pre-defined range or a invalid filter criteria combination is requested
              value:
                status: 400
                code: OUT_OF_RANGE
                message: Client specified an invalid range.
            GENERIC_400_INVALID_CREDENTIAL:
              value:
                status: 400
                code: INVALID_CREDENTIAL
                message: Only Access token is supported
            GENERIC_400_INVALID_TOKEN:
              value:
                status: 400
                code: INVALID_TOKEN
                message: Only bearer token is supported
            GENERIC_400_INVALID_SINK:
              description: Invalid sink value
              value:
                status: 400
                code: INVALID_SINK
                message: sink not valid for the specified protocol

    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated and a new authentication is required
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid, or expired credentials. A new authentication is required.

    Generic403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action.

    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.

    GenericDevice404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
                      - IDENTIFIER_NOT_FOUND
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
            GENERIC_404_DEVICE_NOT_FOUND:
              description: Device identifier not found
              value:
                status: 404
                code: IDENTIFIER_NOT_FOUND
                message: Device identifier not found.

    AssignmentConflict409:
      description: Assignment conflict
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 409
                  code:
                    enum:
                      - CONFLICT
          examples:
            ASSIGNMENT_409_CONFLICT:
              description: The requested provisioning process conflicts with an existing one
              value:
                status: 409
                code: CONFLICT
                message: There is another existing provisioning for the same device

    Generic410:
      description: Gone
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 410
                  code:
                    enum:
                      - GONE
          examples:
            GENERIC_410_GONE:
              description: Use in notifications flow to allow API Consumer to indicate that its callback is no longer available
              value:
                status: 410
                code: GONE
                message: Access to the target resource is no longer available.

    Generic422:
      description: Unprocessable entity
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - SERVICE_NOT_APPLICABLE
                      - MISSING_IDENTIFIER
                      - UNSUPPORTED_IDENTIFIER
                      - UNNECESSARY_IDENTIFIER
          examples:
            GENERIC_422_SERVICE_NOT_APPLICABLE:
              description: Service not applicable for the provided identifier
              value:
                status: 422
                code: SERVICE_NOT_APPLICABLE
                message: The service is not available for the provided identifier.
            GENERIC_422_MISSING_IDENTIFIER:
              description: An identifier is not included in the request and the device or phone number identification cannot be derived from the access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: The device cannot be identified.
            GENERIC_422_UNSUPPORTED_IDENTIFIER:
              description: None of the provided identifiers is supported by the implementation
              value:
                status: 422
                code: UNSUPPORTED_IDENTIFIER
                message: The identifier provided is not supported.
            GENERIC_422_UNNECESSARY_IDENTIFIER:
              description: An explicit identifier is provided when a device or phone number has already been identified from the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: The device is already identified by the access token.ç

    CreateAssignment422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - SERVICE_NOT_APPLICABLE
                      - MISSING_IDENTIFIER
                      - UNSUPPORTED_IDENTIFIER
                      - UNNECESSARY_IDENTIFIER
                      - QOS_PROVISIONING.QOS_PROFILE_NOT_APPLICABLE
          examples:
            GENERIC_422_SERVICE_NOT_APPLICABLE:
              description: Service not applicable for the provided identifier
              value:
                status: 422
                code: SERVICE_NOT_APPLICABLE
                message: The service is not available for the provided identifier.
            GENERIC_422_MISSING_IDENTIFIER:
              description: An identifier is not included in the request and the device or phone number identification cannot be derived from the access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: The device cannot be identified.
            GENERIC_422_UNSUPPORTED_IDENTIFIER:
              description: None of the provided identifiers is supported by the implementation
              value:
                status: 422
                code: UNSUPPORTED_IDENTIFIER
                message: The identifier provided is not supported.
            GENERIC_422_UNNECESSARY_IDENTIFIER:
              description: An explicit identifier is provided when a device or phone number has already been identified from the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: The device is already identified by the access token.
            QOS_PROVISIONING_422_QOS_PROFILE_NOT_APPLICABLE:
              description: The requested QoS Profile exists but cannot be used for the QoS assignment.
              value:
                status: 422
                code: QOS_PROVISIONING.QOS_PROFILE_NOT_APPLICABLE
                message: The requested QoS Profile is not compatible with the QoS Provisioning service.

    Generic429:
      description: Too Many Requests
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 429
                  code:
                    enum:
                      - QUOTA_EXCEEDED
                      - TOO_MANY_REQUESTS
          examples:
            GENERIC_429_QUOTA_EXCEEDED:
              description: Request is rejected due to exceeding a business quota limit
              value:
                status: 429
                code: QUOTA_EXCEEDED
                message: Out of resource quota.
            GENERIC_429_TOO_MANY_REQUESTS:
              description: Access to the API has been temporarily blocked due to rate or spike arrest limits being reached
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Rate limit reached.

  examples:
    ASSIGNMENT_CREATION_EXAMPLE:
      summary: Successful assignment creation without device in the assignment details
      description: Example response after a new QoS profile assignment has been created using a 3-legged access token, or possibly a single device identifier
      value:
        qosProfile: QOS_L
        sink: https://application-server.com/callback
        assignmentId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        status: REQUESTED

    ASSIGNMENT_CREATION_EXAMPLE_WITH_DEVICE_RESPONSE:
      summary: Successful assignment creation with device in the assignment details
      description: Example response after a new QoS profile assignment has been created using a 2-legged access token with multiple device identifiers, or possibly only a single device identifier
      value:
        device:
          phoneNumber: "+123456789"
        qosProfile: QOS_L
        sink: https://application-server.com/callback
        assignmentId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        status: REQUESTED

    ASSIGNMENT_AVAILABLE:
      summary: QoS assignment status is available with device in the assignment details
      description: The QoS profile assignment has become available, and the device to which the assignment applies is included in the assignment details
      value:
        device:
          phoneNumber: "+123456789"
        qosProfile: QOS_L
        sink: https://application-server.com/callback
        sinkCredential:
          credentialType: ACCESSTOKEN
          accessToken: "eyJhbGciOiJIUzI1NiIsInR..."
          accessTokenExpiresUtc: "2024-12-01T12:00:00Z"
          accessTokenType: bearer
        assignmentId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        startedAt: "2024-05-12T17:32:01Z"
        status: AVAILABLE

    ASSIGNMENT_UNAVAILABLE:
      summary: QoD provisioning status is unavailable
      description: The sssignment could not be created or is not active anymore
      value:
        qosProfile: QOS_L
        sink: https://application-server.com/callback
        sinkCredential:
          credentialType: ACCESSTOKEN
          accessToken: "eyJhbGciOiJIUzI1NiIsInR..."
          accessTokenExpiresUtc: "2024-12-01T12:00:00Z"
          accessTokenType: bearer
        assignmentId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        startedAt: "2024-05-12T17:32:01Z"
        status: UNAVAILABLE
        statusInfo: NETWORK_TERMINATED

    ASSIGNMENT_AVAILABLE_WITHOUT_DEVICE:
      summary: QoS assignment status is available
      description: Device is optional in responses and must not be provided if it was not provided in the request
      value:
        qosProfile: QOS_M
        sink: https://application-server.com/callback
        sinkCredential:
          credentialType: ACCESSTOKEN
          accessToken: "eyJhbGciOiJIUzI1NiIsInR..."
          accessTokenExpiresUtc: "2024-12-01T12:00:00Z"
          accessTokenType: bearer
        assignmentId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        startedAt: "2024-05-12T17:32:01Z"
        status: AVAILABLE

    ASSIGNMENT_STATUS_CHANGED_EXAMPLE:
      description: Assignment status changed
      summary: Cloud event example for QoD assignment status change to UNAVAILABLE due to NETWORK_TERMINATED
      value:
        id: 83a0d986-0866-4f38-b8c0-fc65bfcda452
        source: https://api.example.com/qos-provisioning/v0.4/qos-assignments/123e4567-e89b-12d3-a456-426614174000
        specversion: "1.0"
        type: org.camaraproject.qos-provisioning.v0.status-changed
        time: "2021-12-12T00:00:00Z"
        data:
          assignmentId: 123e4567-e89b-12d3-a456-426614174000
          status: UNAVAILABLE
          statusInfo: NETWORK_TERMINATED
