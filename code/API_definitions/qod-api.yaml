openapi: 3.0.3
info:
  title: QoD for enhanced communication
  description: Service Enabling Network Function API for QoS control
  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.9.0-wip
externalDocs:
  description: Product documentation at Camara
  url: https://github.com/camaraproject/
security:
  - oAuth2ClientCredentials: []
servers:
  - url: "{apiRoot}/{basePath}"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
      basePath:
        default: qod/v0
        description: Base path for the QoD API
paths:
  /sessions:
    post:
      tags:
        - QoS sessions
      summary: Creates a new session
      description: Creates a new QoS session on demand
      operationId: createSession
      requestBody:
        description: Creates a new session
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSession"
        required: true
      callbacks:
        notifications:
          "{$request.body#/notificationUrl}/notifications":
            $ref: "#/paths/~1notifications"
      responses:
        "201":
          description: Session created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionInfo"
        "400":
          description: Invalid input for createSession operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Some parameter combinations or parameter values provided are not schema compliant
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Schema validation failed at  ..."
                DeviceMissing:
                  summary: Device must be specified
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: device"
                InsufficientDeviceProperties:
                  summary: Device must be identified by at least one parameter
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Insufficient properties specified: device"
                InconsistentDeviceProperties:
                  summary: Device parameters provided identify different devices
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Multiple inconsistent parameters specified: device"
                CannotIdentifyDevice:
                  summary: No device can be identified from provided parameters
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Unable to identify device from specified parameters: device"
                InvalidDevicePublicPortValue:
                  summary: Invalid port specified for device public port
                  value:
                    status: 400
                    code: OUT_OF_RANGE
                    message: "Invalid port value specified: device.ipv4Address.publicPort"
                ApplicationServerMissing:
                  summary: Application server must be specified
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: applicationServer"
                QoSProfileMissing:
                  summary: Required QoS profile must be specified
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: qosProfile"
                InvalidDevicePortsRanges:
                  summary: Invalid port ranges specified for devicePorts 
                  value:
                    status: 400
                    code: OUT_OF_RANGE
                    message: "Invalid port ranges specified: devicePorts"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                status: 409
                code: CONFLICT
                message: "Another session is created for the same device"
        "500":
          $ref: "#/components/responses/Generic500"
        "501":
          $ref: "#/components/responses/Generic501"
        "503":
          $ref: "#/components/responses/Generic503"
  /sessions/{sessionId}:
    get:
      tags:
        - QoS sessions
      summary: "Get session information"
      operationId: getSession
      parameters:
        - name: sessionId
          in: path
          description: Session ID that was obtained from the createSession operation
          required: true
          schema:
            $ref: "#/components/schemas/SessionId"
      responses:
        "200":
          description: Contains information about active session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionInfo"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/SessionNotFound404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
    patch:
      tags:
        - QoS sessions
      summary: "Patch session information"
      operationId: patchSession
      parameters:
        - name: sessionId
          in: path
          description: Session ID that was obtained from the patchSession operation
          required: true
          schema:
            $ref: "#/components/schemas/SessionId"
      requestBody:
        description: Patch an existing session
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchSession"
        required: true
      responses:
        "200":
          description: Contains information about active session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionInfo"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/SessionNotFound404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
    delete:
      tags:
        - QoS sessions
      summary: "Free resources related to QoS session"
      operationId: deleteSession
      parameters:
        - name: sessionId
          in: path
          description: Session ID that was obtained from the createSession operation
          required: true
          schema:
            $ref: "#/components/schemas/SessionId"
      responses:
        "204":
          description: Session deleted
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/SessionNotFound404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
  /notifications:
    post:
      tags:
        - Session notifications callback
      summary: "Session notifications callback"
      description: |
        Important: this endpoint is to be implemented by the API consumer.
        The QoD server will call this endpoint whenever any network related event occurs.
        Currently only QOS_STATUS_CHANGED event is defined.
      operationId: postNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notification"
      responses:
        "204":
          description: Successful notification
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
      security:
        - apiKey: []
  /qos-profiles:
    get:
      tags:
        - QoS Profiles
      summary: "Get All QoS Profiles"
      description: |
        Returns all QoS Profiles that match the given criteria.
        If no criteria is given, all QoS Profiles are returned.
      operationId: getQosProfiles
      parameters:
        - name: name
          in: query
          description: QoS Profile name
          schema:
            type: string
          required: false
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/QosProfileStatusEnum'
          required: false
      responses:
        "200":
          description: Contains information about QoS Profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QosProfile"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/QosProfilesNotFound404"
        "500":
          $ref: "#/components/responses/QoSProfile500"
        "503":
          $ref: "#/components/responses/Generic503"
  /qos-profiles/{name}:
    get:
      tags:
        - QoS Profiles
      summary: "Get QoS Profile for a given name"
      operationId: getQosProfile
      description: |
        Returns a QoS Profile that matches the given name.
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/QosProfileName"
      responses:
        "200":
          description: Contains information about QoS Profiles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QosProfile"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/QosProfileNotFound404"
        "500":
          $ref: "#/components/responses/QoSProfile500"
        "503":
          $ref: "#/components/responses/Generic503"
components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      description: This API uses OAuth 2 with the client credentials grant flow.
      flows:
        clientCredentials:
          tokenUrl: "{tokenUrl}"
          scopes: {}
    apiKey:
      type: apiKey
      description: API key to authorize requests
      name: apikey
      in: query
  schemas:
    SessionId:
      type: string
      format: uuid
      description: Session ID in UUID format

    SessionInfo:
      description: Session related information.
      allOf:
        - $ref: "#/components/schemas/CreateSession"
        - type: object
          required:
            - sessionId
            - duration
            - startedAt
            - expiresAt
            - qosStatus
          properties:
            sessionId:
              $ref: "#/components/schemas/SessionId"
            startedAt:
              type: integer
              example: 1639479600
              description: Timestamp of session start in seconds since unix epoch
              format: int64
            expiresAt:
              type: integer
              example: 1639566000
              description: Timestamp of session expiration if the session was not deleted, in seconds since unix epoch
              format: int64
            qosStatus:
              $ref: "#/components/schemas/QosStatus"
            messages:
              type: array
              items:
                $ref: "#/components/schemas/Message"

    CreateSession:
      description: Data type with attributes required for creating a session
      type: object
      properties:
        duration:
          type: integer
          example: 86400
          description: |
            Session duration in seconds. Maximal value of 24 hours is used if not set.
            After session has expired the client will receive QOS_STATUS_CHANGED event with 
             - qosStatus is 'UNAVAILABLE', and, 
             - statusInfo is 'DURATION_EXPIRED'. 
            See notification callback.
          format: int32
          minimum: 1
          maximum: 86400
          default: 86400
        device:
          $ref: "#/components/schemas/Device"
        applicationServer:
          $ref: "#/components/schemas/ApplicationServer"
        devicePorts:
          $ref: "#/components/schemas/PortsSpec"
          description: The ports used locally by the device for flows to which the requested QoS profile should apply. If omitted, then the qosProfile will apply to all flows between the device and the specified application server address and ports.
        applicationServerPorts:
          $ref: "#/components/schemas/PortsSpec"
        qosProfile:
          $ref: "#/components/schemas/QosProfileName"
        notificationUrl:
          type: string
          format: uri
          example: "https://application-server.com"
          description: Allows asynchronous delivery of session related events
        notificationAuthToken:
          type: string
          example: "c8974e592c2fa383d4a3960714"
          description: Authentication token for callback API
      required:
        - device
        - applicationServer
        - qosProfile

   PatchSession:
      description: | 
            Data type with attributes required for patching a session. 
            The top level properties in this object will replace the previous values in the session. There is no merge in the children objects.
      type: object
      properties:
        duration:
          type: integer
          example: 86400
          description: |
            Session duration in seconds. Maximal value of 24 hours is used if not set.
            After session has expired the client will receive QOS_STATUS_CHANGED event with 
             - qosStatus is 'UNAVAILABLE', and, 
             - statusInfo is 'DURATION_EXPIRED'. 
            See notification callback.
          format: int32
          minimum: 1
          maximum: 86400
          default: 86400
        applicationServer:
          $ref: "#/components/schemas/ApplicationServer"
        devicePorts:
          $ref: "#/components/schemas/PortsSpec"
          description: The ports used locally by the device for flows to which the requested QoS profile should apply. If omitted, then the qosProfile will apply to all flows between the device and the specified application server address and ports.
        applicationServerPorts:
          $ref: "#/components/schemas/PortsSpec"
        notificationUrl:
          type: string
          format: uri
          example: "https://application-server.com"
          description: Allows asynchronous delivery of session related events
        notificationAuthToken:
          type: string
          example: "c8974e592c2fa383d4a3960714"
          description: Authentication token for callback API

    Port:
      type: integer
      minimum: 0
      maximum: 65535

    PortsSpec:
      type: object
      minProperties: 1
      properties:
        ranges:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - from
              - to
            properties:
              from:
                $ref: "#/components/schemas/Port"
              to:
                $ref: "#/components/schemas/Port"
        ports:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Port"
      example:
        ranges:
          - from: 5010
            to: 5020
        ports:
          - 5060
          - 5070
      description: |
        Ports may be specified as a list of ranges or single ports.

    QosProfile:
      description: |
        Data type with attributes of a QosProfile
      type: object
      properties:
        name:
          $ref: "#/components/schemas/QosProfileName"
        description:
          description: |
            A description of the QoS profile.
          type: string
          example: "QoS profile for video streaming"
        status:
          $ref: "#/components/schemas/QosProfileStatusEnum"
        targetMinUpstreamRate:
          allOf:
            - $ref: "#/components/schemas/Rate"
            - description: |
                This is the target minimum upstream rate for the QoS profile.

                For 5G networks 3GPP Guaranteed Bit Rate (GBR) refers to a dedicated, fixed data rate assigned to
                specific services, ensuring a minimum performance level. As per 3GPP TS 23.203,
                GBR is a QoS parameter used to manage traffic classes in mobile networks. It
                provides a stable data rate for latency-sensitive applications, such as voice calls or
                video streaming, helping maintain a consistent user experience. When this attribute is set
                this could imply that a GBR QCI is used, though mechanisms on the network can be used to
                ensure a minimum performance level without using a GBR QCI.

                The committed data rate allocated to specific services, ensuring a consistent level of
                performance. For DOCSIS networks, the "Minimum Reserved Traffic Rate" is defined in the 
                DOCSIS 3.1 - MAC and Upper Layer Protocols Interface Specification" 
                and it ensures a consistent level of performance for specific services within the network.
        maxUpstreamRate:
          allOf:
            - $ref: "#/components/schemas/Rate"
            - description: |
                The maximum best effort data
        maxUpstreamBurstRate:
          allOf:
            - $ref: "#/components/schemas/Rate"
            - description: |
                When defined, this is the maximum upstream burst rate for the QoS profile, that will enable
                the network to burst data at a higher rate than the maxUpstreamRate for a period of time.
        targetMinDownstreamRate:
          allOf:
            - $ref: "#/components/schemas/Rate"
            - description: |
                This is the target minimum downstream rate for the QoS profile.

                For 5G networks 3GPP Guaranteed Bit Rate (GBR) refers to a dedicated, fixed data rate assigned to
                specific services, ensuring a minimum performance level. As per 3GPP TS 23.203,
                GBR is a QoS parameter used to manage traffic classes in mobile networks. It
                provides a stable data rate for latency-sensitive applications, such as voice calls or
                video streaming, helping maintain a consistent user experience.  When this attribute is set
                this could imply that a GBR QCI is used, though mechanisms on the network can be used to
                ensure a minimum performance level without using a GBR QCI.

                The committed data rate allocated to specific services, ensuring a consistent level of
                performance. DOCSIS networks, the "Minimum Reserved Traffic Rate" is defined in the 
                DOCSIS 3.1 - MAC and Upper Layer Protocols Interface Specification" 
                and it ensures a consistent level of performance for specific services within the network.
        maxDownstreamRate:
          allOf:
            - $ref: "#/components/schemas/Rate"
            - description: |
                The maximum best effort rate
        maxDownstreamBurstRate:
          allOf:
            - $ref: "#/components/schemas/Rate"
            - description: |
                When defined, this is the maximum downstream burst rate for the QoS profile, that will enable
                the network to burst data at a higher rate than the maxDownstreamRate for a period of time.

                This can result in improved user experience when there is additional network capacity.
                For instance, when a user is streaming a video, the network can burst data at a higher rate
                to fill the buffer, and then return to the maxUpstreamRate once the buffer is full.
        minDuration:
          allOf:
            - $ref: "#/components/schemas/Duration"
            - description: |
                The shortest time period that this profile can be deployed.
        maxDuration:
          allOf:
            - $ref: "#/components/schemas/Duration"
            - description: |
                The maximum time period that this profile can be deployed.
        priority:
          type: integer
          example: 20
          description: |
            Priority levels allow efficient resource allocation and ensure optimal performance
            for various services in each technology, with the highest priority traffic receiving
            preferential treatment.
            The lower value the higher priority.
            Not all access networks use the same priority range, so this priority will be
            scaled to the access network's priority range.
          format: integer
          minimum: 1
          maximum: 100
        packetDelayBudget:
          allOf:
            - $ref: "#/components/schemas/Duration"
            - description: |
                The packet delay budget is the maximum allowable one-way latency between the customer's device
                and the gateway from the operator's network to other networks. By limiting the delay, the network
                can provide an acceptable level of performance for various services, such as voice calls,
                video streaming, and data.

                The end-to-end or round trip latency will be about two times this value plus the latency not controlled
                by the operator
        jitter:
          allOf:
            - $ref: "#/components/schemas/Duration"
            - description: |
                The jitter requirement aims to limit the maximum variation in round-trip
                packet delay for the 99th percentile of traffic, following ITU Y.1540
                standards. It considers only acknowledged packets in a session, which are
                packets that receive a confirmation of receipt from the recipient (e.g.,
                using TCP). This requirement helps maintain consistent latency, essential
                for real-time applications such as VoIP, video calls, and gaming.
        packetErrorLossRate:
          type: integer
          description: |
            The exponential power of the allowable error loss rate 10^(-N).
            For instance 3 would be an error loss rate of 10 to the power of -3 (0.001)

            For 5G network the 3GPP specification TS 23.203 defines the packet error loss rate QCI attribute. It
            describes the Quality of Service (QoS) Class Identifier (QCI) parameters used to
            differentiate traffic classes in mobile networks, ensuring appropriate resource
            allocation and performance for various services.

            The packet error loss rate is one of the QCI attributes, providing information on the
            acceptable packet loss rate for a specific traffic class. This attribute helps maintain
            the desired performance level for services like voice calls, video streaming, or data
            transfers within the 3GPP mobile network.
          format: int32
          minimum: 1
          maximum: 10
          example: 3
      required:
        - name
        - status
    QosProfileName:
      description: |
        A unique name for identifying a specific QoS profile.
        This may follow different formats depending on the service providers implementation.
        Some options addresses:
          - A UUID style string
          - Support for predefined profiles QOS_S, QOS_M, QOS_L, and QOS_E
          - A searchable descriptive name
      type: string
      example: QCI_1_voice
      minLength: 3
      maxLength: 256
      format: string
      pattern: "^[a-zA-Z0-9_.-]+$"
    Rate:
      type: object
      properties:
        value:
          type: integer
          example: 10
          format: int32
          minimum: 0
          maximum: 1024
        unit:
          $ref: "#/components/schemas/RateUnitEnum"
    Duration:
      type: object
      properties:
        value:
          type: integer
          example: 12
          format: int32
          minimum: 1
        unit:
          allOf:
            - $ref: "#/components/schemas/TimeUnitEnum"
            - example: Minutes
    TimeUnitEnum:
      type: string
      enum:
        - Days
        - Hours
        - Minutes
        - Seconds
        - Milliseconds
        - Microseconds
        - Nanoseconds
    QosProfileStatusEnum:
      description: |
        The current status of the QoS Profile
        - `ACTIVE`- QoS Profile is available to be used
        - `INACTIVE`- QoS Profile is not currently available to be deployed
        - `DEPRECATED`- QoS profile is actively being used in a QoD session, but can not be deployed in new QoD sessions
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - DEPRECATED
    RateUnitEnum:
      type: string
      enum:
        - bps
        - kbps
        - Mbps
        - Gbps
        - Tbps
    Notification:
      type: object
      required:
        - sessionId
        - eventReports
      properties:
        sessionId:
          $ref: "#/components/schemas/SessionId"
        eventReports:
          type: array
          items:
            $ref: "#/components/schemas/EventReport"
          minItems: 1
          description: Contains the reported event and applicable information
    EventReport:
      oneOf:
        - $ref: '#/components/schemas/QosStatusChangedEventReport'
      discriminator:
        propertyName: eventType
        mapping:
          QOS_STATUS_CHANGED: "#/components/schemas/QosStatusChangedEventReport"
    QosStatusChangedEventReport:
      type: object
      required:
        - eventType
        - qosStatus
      properties:
        eventType:
          $ref: "#/components/schemas/SessionEventType"
        qosStatus:
          $ref: "#/components/schemas/QosStatus"
        statusInfo:
          $ref: "#/components/schemas/StatusInfo"
    StatusInfo:
          type: string
          enum:
            - DURATION_EXPIRED
            - NETWORK_TERMINATED
          description: |
            Reason for the new `qosStatus`. Currently `statusInfo` is only applicable when `qosStatus` is 'UNAVAILABLE'.
            * `DURATION_EXPIRED` - Session terminated due to requested duration expired
            * `NETWORK_TERMINATED` - Network terminated the session before the requested duration expired

    SessionEventType:
      type: string
      enum:
        - QOS_STATUS_CHANGED
    
    Device:
      type: object
      minProperties: 1
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/Ipv6Address"
      description: One or more parameters allocated to the device that allow it to be identified

    ApplicationServer:
      type: object
      minProperties: 1
      properties:
        ipv4Address:
          $ref: "#/components/schemas/Ipv4Address"
        ipv6Address:
          $ref: "#/components/schemas/Ipv6Address"
      description: Application server identifier

    NetworkAccessIdentifier:
      type: string
      example: "123456789@domain.com"

    PhoneNumber:
      type: string
      pattern: '^\+?[0-9]{5,15}$'
      example: "123456789"
      description: Subscriber number (MSISDN) in E.164 format, starting with country code and optionally prefixed with '+'.

    DeviceIpv4Addr:
      type: object
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
            {
              "publicAddress": "84.125.93.10",
              "publicPort" : 59765
            }
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).
        
        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.
        
        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)
      
        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.

    SingleIpv4Addr:
      type: string
      description: A single IPv4 address with no subnet mask
      example: "84.125.93.10"
      pattern: '^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'

    Ipv4Address:
      type: string
      pattern: '^([01]?\d\d?|2[0-4]\d|25[0-5])(?:\.(?:[01]?\d\d?|2[0-4]\d|25[0-5])){3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
      example: "192.168.0.1/24"
      description: |
        IPv4 address may be specified in form <address/mask> as:
          - address - an IPv4 number in dotted-quad form 1.2.3.4. Only this exact IP number will match the flow control rule.
          - address/mask - an IP number as above with a mask width of the form 1.2.3.4/24.
            In this case, all IP numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid for the IP version.

    Ipv6Address:
      type: string
      allOf:
        - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))?$'
        - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))(\/.+)?$'
      example: "2001:db8:85a3:8d3:1319:8a2e:370:7344"
      description: |
        IPv6 address, following IETF 5952 format, may be specified in form <address/mask> as:
          - address - The /128 subnet is optional for single addresses:
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344/128
          - address/mask - an IP v6 number with a mask:
            - 2001:db8:85a3:8d3::0/64
            - 2001:db8:85a3:8d3::/64

    Message:
      type: object
      properties:
        severity:
          type: string
          enum: ["INFO", "WARNING"]
          description: Message severity
        description:
          type: string
          description: Detailed message text
      required:
        - severity
        - description

    QosStatus:
      type: string
      enum:
        - REQUESTED
        - AVAILABLE
        - UNAVAILABLE
      description: |
        * `REQUESTED` - QoS has been requested by creating a session
        * `AVAILABLE` - The requested QoS has been provided by the network
        * `UNAVAILABLE` - The requested QoS cannot be provided by the network due to some reason

    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
  responses:
    Generic400:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 400
            code: INVALID_ARGUMENT
            message: "Schema validation failed at  ..."
    Generic401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 401
            code: UNAUTHENTICATED
            message: "Authorization failed: ..."
    Generic403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 403
            code: PERMISSION_DENIED
            message: "Operation not allowed: ..."
    SessionNotFound404:
      description: Session not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 404
            code: NOT_FOUND
            message: "Session Id does not exist"
    QosProfilesNotFound404:
      description: Qos Profiles not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: NOT_FOUND
            message: "No QoS Profiles found"
    QosProfileNotFound404:
      description: Qos Profile not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: NOT_FOUND
            message: "QosProfile Id does not exist"
    Generic500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 500
            code: INTERNAL
            message: "Internal server error: ..."
    QoSProfile500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 500
            code: INTERNAL
            message: "Internal server error: Could not get QoS Profile"
    Generic501:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 501
            code: NOT_IMPLEMENTED
            message: "Service not implemented for the specified user device"
    Generic503:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 503
            code: UNAVAILABLE
            message: "Service unavailable"
