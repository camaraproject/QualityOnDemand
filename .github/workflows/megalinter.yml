---
# MegaLinter GitHub Action configuration file
# More info at https://megalinter.io
# CAMARA Project - Github Action for Pull Reqests
# 31.01.2024 - initial version
# 08.03.2024 - added javalint config (for QoD tests)

name: MegaLinter

on: # yamllint disable-line rule:truthy
  # Pull Requests to main
  pull_request:
    branches: [master, main]

env: # Comment env block if you do not want to apply fixes
  # Apply linter fixes configuration
  APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
  APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
  APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: MegaLinter
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push, comment issues & post new PR
      # Remove the ones you do not need
      contents: write
      issues: write
      pull-requests: write
    steps:
      # Git Checkout
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # If you use VALIDATE_ALL_CODEBASE = true, you can remove this line to improve performances
      - name: Install Spectral
        run: npm install -g @stoplight/spectral
      - name: Install Spectral functions
        run: npm install -g @stoplight/spectral-functions
      - name: Install Gherkin Linter
        run: npm install -g gherkin-lint
      - name: Run Gherkin Linting
        run: gherkin-lint code/Test_definitions/*.feature
        # - name: Run spectral:oas Spectral Linting
        #   run: spectral lint code/API_definitions/*.yaml --verbose --ruleset .spectral.yml
        # Replace openapi.yaml file with your API specification file

      # MegaLinter
      - name: MegaLinter
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://megalinter.io/flavors/
        uses: oxsecurity/megalinter/flavors/java@v7.3.0
        env:
          # All available variables are described in documentation
          # https://megalinter.io/configuration/
          PRINT_ALPACA: false
          # VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources
          VALIDATE_ALL_CODEBASE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY
          DISABLE: COPYPASTE,MARKDOWN
          DISABLE_LINTERS: SPELL_CSPELL,SPELL_LYCHEE,YAML_PRETTIER,REPOSITORY_GRYPE, REPOSITORY_SEMGREP,REPOSITORY_DEVSKIM,REPOSITORY_KICS,REPOSITORY_TRIVY,REPOSITORY_TRIVY_SBOM,REPOSITORY_TRUFFLEHOG,REPOSITORY_CHECKOV,REPOSITORY_GITLEAKS,YAML_V8R,JAVA_PMD
          YAML_YAMLLINT_CONFIG_FILE: ".yamllint.yaml"
          JAVA_CHECKSTYLE_CONFIG_FILE: "javalint.xml"
          OPENAPI_SPECTRAL_CONFIG_FILE: ".spectral.yml"
          YAML_YAMLLINT_FILTER_REGEX_INCLUDE: "(code/)"
          OPENAPI_SPECTRAL_FILTER_REGEX_INCLUDE: "(code/)"

          # Upload MegaLinter artifacts
      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: MegaLinter reports
          path: |
            megalinter-reports
            mega-linter.log
